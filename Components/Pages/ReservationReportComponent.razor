@page "/reservation-report"
@rendermode InteractiveServer
@using HMS.Data
@using HMS.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using OfficeOpenXml
@inject IReservationService reservationService
@inject IJSRuntime jsRuntime
@inject ILogger<ReservationReportComponent> logger
@attribute [Authorize]

<h4 class="text-center">Reservation Report (Date Wise)</h4>
<hr />

<div class="d-flex gap-2 mb-3">
    <InputDate @bind-Value="fromDate" />
    <InputDate @bind-Value="toDate" />
    <InputCheckbox @bind-Value="checkOut" id="checkOut" name="checkOut" />
    <label class="form-label" for="checkOut">Check-Out</label>
    <button class="btn btn-sm btn-info" @onclick="LoadReservations">Generate Report</button>
</div>
<div Class="row mb-3">
    <div class="col">
        <button class="btn btn-sm btn-outline-success" @onclick="ExportToExcel">Export</button>
    </div>
</div>

<QuickGrid Items="reservations.AsQueryable()" Pagination="pagination" Class="table table-bordered table-striped">
    <PropertyColumn Property="@(r => r.CheckInDate.ToString("yyyy-MM-dd"))" Title="Check-in" Sortable="true" />
    <PropertyColumn Property="@(r => r.CheckOutDate.ToString("yyyy-MM-dd"))" Title="Check-Out" Sortable="true" />
    <PropertyColumn Property="@(r => $"{r.Room.RoomNumber} - {r.Room.RoomType.ToString()}")" Title="Room" Sortable="true" />
    <PropertyColumn Property="@(r => r.TotalPrice)" Title="Total Price" Sortable="true" />
    <PropertyColumn Property="@(r => r.IsPaid ? "Paid" : "Unpaid")" Title="Payment" Sortable="true" />
</QuickGrid>

<Paginator State="pagination" />

@code {
    private DateTime fromDate = DateTime.Now;
    private DateTime toDate = DateTime.Now;
    private List<Reservation> reservations = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private bool checkOut = false;

    private async Task LoadReservations()
    {
        reservations = (await reservationService.GetReservationsByDateRange(fromDate, toDate, checkOut))?.ToList() ?? new List<Reservation>();
    }

    private async Task ExportToExcel()
    {
        try
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set license context
            using var package = new OfficeOpenXml.ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("ReservationtReport");

            // Add headers
            worksheet.Cells[1, 1].Value = "SL";
            worksheet.Cells[1, 2].Value = "Check-In";
            worksheet.Cells[1, 3].Value = "Check-out";
            worksheet.Cells[1, 4].Value = "Hotel";
            worksheet.Cells[1, 5].Value = "Room";
            worksheet.Cells[1, 6].Value = "Type";
            worksheet.Cells[1, 7].Value = "Total Price";
            worksheet.Cells[1, 8].Value = "Payment Status";

            // Populate data
            for (int i = 0; i < reservations.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = (i + 1);
                worksheet.Cells[i + 2, 2].Value = reservations[i].CheckInDate.ToString("yyyy-MM-dd");
                worksheet.Cells[i + 2, 3].Value = reservations[i].CheckOutDate.ToString("yyyy-MM-dd");
                worksheet.Cells[i + 2, 5].Value = reservations[i].Room?.RoomNumber;
                worksheet.Cells[i + 2, 6].Value = reservations[i].Room?.RoomType.ToString();
                worksheet.Cells[i + 2, 7].Value = reservations[i].TotalPrice;
                worksheet.Cells[i + 2, 8].Value = reservations[i].IsPaid ? "Paid" : "Unpaid";
            }

            // Convert to bytes and trigger download
            var excelBytes = package.GetAsByteArray();
            var fileName = "ReservationtReport.xlsx";
            await using var stream = new MemoryStream(excelBytes);

            using var streamRef = new Microsoft.JSInterop.DotNetStreamReference(stream);

            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            logger.LogError($"Error exporting payment report: {ex.Message}");
        }

    }
}
