@page "/add-room"
@rendermode InteractiveServer
@using HMS.Data
@using HMS.Services
@using Microsoft.AspNetCore.Authorization
@inject IRoomService roomService
@inject NavigationManager navigation
@attribute [Authorize(Roles = "Administrator")]

<h4 Class="text-center">Add Room</h4>
<hr/>

<button Class="ml-auto mt-3 btn btn-sm btn-link" @onclick="GoToList">Room List</button>

<EditForm EditContext="@editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col">
            <label for="roomTypeSelect" class="mt-3">Room Type</label>
            <select id="roomTypeSelect" class="form-control" @bind="model.RoomType">
                <option value="">-- Select Type --</option>
                @if (roomTypes.Count > 0)
                {
                    @foreach (var roomType in roomTypes)
                    {
                        <option value="@roomType">@roomType</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => model.RoomType)" />

            <InputText Placeholder="Room Number" Class="form-control mt-3" @bind-Value="@model.RoomNumber" For="@(() => model.RoomNumber)" />
            <ValidationMessage For="@(() => model.RoomNumber)" />

            <label for="pricePerNight" class="mt-3">Price Per Night</label>
            <InputNumber @bind-Value="@model.PricePerNight" id="pricePerNight" Class="form-control mt-3" />
            <ValidationMessage For="@(() => model.PricePerNight)" />

            <div class="form-check mt-3">
                <InputCheckbox Class="form-check-input" @bind-Value="@model.IsAvailable" />
                <label class="form-check-label">Is Available</label>
            </div>

            @if (success)
            {
                <div class="text-success success-message">Room added successfully!</div>
            }

            <button type="submit" Class="ml-auto mt-3 btn btn-sm btn-outline-primary">Add Room</button>
        </div>
    </div>
</EditForm>

@code {
    Room model = new Room();
    EditContext editContext;
    bool success;
    private List<RoomType> roomTypes = new List<RoomType>();

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(model);
        roomTypes = Enum.GetValues(typeof(RoomType)).Cast<RoomType>().ToList();

        await base.OnInitializedAsync();
    }

    private async void OnValidSubmit(EditContext context)
    {
        success = false; // Reset success before each submission
        var result = await roomService.AddRoomAsync(model);
        if (result != null)
        {
            success = true;
            ResetForm(); // Reset the form
        }

        StateHasChanged();
    }

    private void GoToList()
    {
        navigation.NavigateTo("room");
    }

    private async Task ResetForm()
    {
        model = new Room();
        editContext = new EditContext(model); // Create a new EditContext
        await Task.Delay(3000); // Wait for 3 seconds
        success = false; // Reset success after 3 seconds
        StateHasChanged();
    }
}
