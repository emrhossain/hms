@page "/add-room"
@rendermode InteractiveServer
@using HMS.Data
@using HMS.Services
@using Microsoft.AspNetCore.Authorization
@inject IRoomService roomService
@inject IHotelService hotelService
@inject NavigationManager navigation
@attribute [Authorize]

<h3 Class="text-center">Add Room</h3>

<button Class="ml-auto mt-3 btn btn-sm btn-link" @onclick="GoToList">Room List</button>

<EditForm EditContext="@editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col">
            <label for="hotelSelect" class="mt-3">Select Hotel</label>
            <select id="hotelSelect" class="form-control" @bind="model.HotelId">
                <option value="">-- Select Hotel --</option>
                @if (hotels != null)
                {
                    @foreach (var hotel in hotels)
                    {
                        <option value="@hotel.HotelId">@hotel.Name</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => model.HotelId)" />

            <label for="roomTypeSelect" class="mt-3">Room Type</label>
            <select id="roomTypeSelect" class="form-control" @bind="model.RoomType">
                <option value="">-- Select Room Type --</option>
                <option value="Single">Single</option>
                <option value="Double">Double</option>
                <option value="Suite">Suite</option>
                <option value="Deluxe">Deluxe</option>
            </select>
            <ValidationMessage For="@(() => model.RoomType)" />

            <InputText Placeholder="Room Number" Class="form-control mt-3" @bind-Value="@model.RoomNumber" For="@(() => model.RoomNumber)" />
            <ValidationMessage For="@(() => model.RoomNumber)" />

            <label for="pricePerNight" class="mt-3">Price Per Night</label>
            <InputNumber @bind-Value="@model.PricePerNight" id="pricePerNight" Class="form-control mt-3" />
            <ValidationMessage For="@(() => model.PricePerNight)" />

            <div class="form-check mt-3">
                <InputCheckbox Class="form-check-input" @bind-Value="@model.IsAvailable" />
                <label class="form-check-label">Is Available</label>
            </div>

            @if (success)
            {
                <div class="text-success success-message">Room added successfully!</div>
            }

            <button type="submit" Class="ml-auto mt-3 btn btn-sm btn-outline-primary">Add Room</button>
        </div>
    </div>
</EditForm>

@code {
    Room model = new Room();
    EditContext editContext;
    bool success;
    IEnumerable<Hotel> hotels = new List<Hotel>();

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(model);
        await LoadHotelsAsync();
    }

    private async Task LoadHotelsAsync()
    {
        try
        {
            hotels = await hotelService.GetHotelsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading hotels: {ex.Message}");
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        success = false; // Reset success before each submission
        var result = await roomService.AddRoomAsync(model);
        if (result != null)
        {
            success = true;
            ResetForm(); // Reset the form
        }

        StateHasChanged();
    }

    private void GoToList()
    {
        navigation.NavigateTo("room");
    }

    private async Task ResetForm()
    {
        model = new Room();
        editContext = new EditContext(model); // Create a new EditContext
        await Task.Delay(3000); // Wait for 3 seconds
        success = false; // Reset success after 3 seconds
        StateHasChanged();
    }
}
