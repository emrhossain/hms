@page "/room"
@rendermode InteractiveServer
@using HMS.Data
@using HMS.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using OfficeOpenXml
@inject IRoomService roomService
@inject NavigationManager navigation
@inject IJSRuntime jsRuntime
@inject ILogger<RoomComponent> logger

<h4 class="text-center">Rooms</h4>
<hr />

<div class="row mb-3">
    <div class="col">
        <button class="btn btn-sm btn-outline-info" @onclick="AddRoom">Add</button>
        <button class="btn btn-sm btn-outline-success" @onclick="ExportToExcel">Export</button>
    </div>
</div>

<div class="row mb-3">
    <div class="col-auto">
        <InputText class="form-control" placeholder="Room Number" @bind-Value="searchRoomNumber" />
    </div>
    <div class="col-auto">
        <InputText class="form-control" placeholder="Room Type" @bind-Value="searchRoomType" />
    </div>
    <div class="col-auto">
        <button class="btn btn-outline-primary mb-3" @onclick="SearchWithTerm">Search</button>
    </div>
</div>

@if (rooms == null)
{
    <div>Loading...</div>
}
else if (!rooms.Any())
{
    <div>No data available</div>
}
else
{
    <QuickGrid Items="rooms" Pagination="pagination" Class="table table-responsive table-bordered table-striped">
        <PropertyColumn Property="@(r => r.RoomNumber)" Title="Room Number" Sortable="true" />
        <PropertyColumn Property="@(r => r.RoomType)" Title="Room Type" Sortable="true" />
        <PropertyColumn Property="@(r => r.PricePerNight)" Title="Price/Night" Sortable="true" />
        <PropertyColumn Property="@(r => r.IsAvailable)" Title="Available" Sortable="true" />
        <PropertyColumn Property="@(r => r.Hotel.Name)" Title="Hotel" />
        <TemplateColumn Title="Actions">
            <button class="btn btn-sm btn-link" @onclick="@(() => EditRoom(context.RoomId))"><i class="bi bi-pencil"></i></button>
            <button class="btn btn-sm btn-link" @onclick="@(() => DeleteRoom(context))"><i class="bi bi-trash"></i></button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="pagination" />
}

@code {
    private string searchRoomNumber = string.Empty;
    private string searchRoomType = string.Empty;
    private IQueryable<Room>? rooms;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadRoomsAsync();
        }
        catch (Exception ex)
        {
            logger.LogError($"Error loading rooms: {ex.Message}");
        }
    }

    private async Task LoadRoomsAsync()
    {
        try
        {
            var roomList = await roomService.GetAllRoomsAsync();
            rooms = roomList.AsQueryable();
        }
        catch (Exception ex)
        {
            logger.LogError($"Error fetching room data: {ex.Message}");
        }
    }

    private async Task SearchWithTerm()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchRoomNumber) && string.IsNullOrWhiteSpace(searchRoomType))
            {
                await LoadRoomsAsync();
            }
            else
            {
                var filteredRooms = await roomService.SearchRoomsAsync(searchRoomNumber, searchRoomType);
                rooms = filteredRooms.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"Error during search: {ex.Message}");
        }
    }

    private void AddRoom()
    {
        navigation.NavigateTo("add-room");
    }

    private async Task ExportToExcel()
    {
        try
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set license context
            using var package = new OfficeOpenXml.ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Rooms");

            // Add headers
            worksheet.Cells[1, 1].Value = "SL";
            worksheet.Cells[1, 2].Value = "Room Number";
            worksheet.Cells[1, 3].Value = "Room Type";
            worksheet.Cells[1, 4].Value = "Price Per Night";
            worksheet.Cells[1, 5].Value = "Available";
            worksheet.Cells[1, 6].Value = "Hotel";

            // Populate data
            var roomList = rooms.ToList();
            for (int i = 0; i < roomList.Count; i++)
            {
                var row = i + 2;
                worksheet.Cells[row, 1].Value = (i + 1);
                worksheet.Cells[row, 2].Value = roomList[i].RoomNumber;
                worksheet.Cells[row, 3].Value = roomList[i].RoomType;
                worksheet.Cells[row, 4].Value = roomList[i].PricePerNight;
                worksheet.Cells[row, 5].Value = roomList[i].IsAvailable ? "Yes" : "No";
                worksheet.Cells[row, 6].Value = roomList[i].Hotel?.Name ?? "N/A";
            }

            // Convert to bytes and trigger download
            var excelBytes = package.GetAsByteArray();
            var fileName = "Rooms.xlsx";
            await using var stream = new MemoryStream(excelBytes);

            using var streamRef = new Microsoft.JSInterop.DotNetStreamReference(stream);

            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            logger.LogError($"Error exporting to Excel: {ex.Message}");
        }

    }

    private Task EditRoom(int id)
    {
        navigation.NavigateTo($"room/edit/{id}");
        return Task.CompletedTask;
    }

    private async Task DeleteRoom(Room room)
    {
        try
        {
            var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete this room: '{room.RoomNumber}'?" });

            if (confirmed)
            {
                await roomService.DeleteRoomAsync(room.RoomId);
                await LoadRoomsAsync();
                StateHasChanged(); // Refresh the UI.
                logger.LogError($"Deleted room: {room.RoomNumber}");
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"Error deleting room: {ex.Message}");
        }
    }
}
