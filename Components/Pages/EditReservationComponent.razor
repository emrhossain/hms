@page "/reservation/edit/{id:int}"
@rendermode InteractiveServer
@using HMS.Data
@using HMS.Services
@inject IReservationService reservationService
@inject IRoomService roomService
@inject ICustomerService customerService
@inject NavigationManager navigation
@inject IJSRuntime jsRuntime

<h4 Class="text-center">Edit Reservation</h4>
<hr />

<button Class="ml-auto mt-3 btn btn-sm btn-link" @onclick="GoToList">Back to list</button>

<EditForm Model="@reservation" FormName="AddReservation" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Customer</label>
        <InputSelect TValue="int" Value="@reservation.CustomerId" ValueExpression="() => reservation.CustomerId" ValueChanged="OnCustomerChange" class="form-control selectsearch">
            <option value="">Select a Customer</option>
            <option value="-1">Add New Customer</option>
            @foreach (var customer in customers)
            {
                <option value="@customer.CustomerId">@customer.Email - @customer.PhoneNumber</option>
            }
        </InputSelect>
    </div>
    @if (isAddingNewCustomer)
    {
        <div class="border p-3 mt-2">
            <h5>New Customer Details</h5>
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="newCustomer.Name" class="form-control" />
            </div>
            <div class="form-group">
                <label>Phone Number</label>
                <InputText @bind-Value="newCustomer.PhoneNumber" class="form-control" />
            </div>
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="newCustomer.Email" class="form-control" />
            </div>
            <div class="form-group">
                <label>Address</label>
                <InputText @bind-Value="newCustomer.Address" class="form-control" />
            </div>
            @if (customerMessage != string.Empty)
            {
                <div class="text-danger">@customerMessage</div>
            }
            <button type="button" class="btn btn-sm btn-success mt-2" @onclick="SaveNewCustomer">Save Customer</button>
        </div>
    }
    <div class="form-group">
        <label>Room</label>
        <InputSelect TValue="int" Value="@reservation.RoomId" ValueExpression="() => reservation.RoomId" class="form-control selectsearch" ValueChanged="OnRoomChange">
            <option value="">Select a Room</option>
            @foreach (var room in rooms)
            {
                <option value="@room.RoomId">@room.RoomNumber - @room.RoomType.ToString() - @(room.IsAvailable ? "Available" : "Occupied")</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Check-In Date</label>
        <InputDate TValue="DateTime" Value="@reservation.CheckInDate" ValueExpression="(() => reservation.CheckInDate)" class="form-control" ValueChanged="CheckInDateChange" />
    </div>
    <div class="form-group">
        <label>Check-Out Date</label>
        <InputDate TValue="DateTime" Value="@reservation.CheckOutDate" ValueExpression="(() => reservation.CheckOutDate)" class="form-control" ValueChanged="CheckOutDateChange" />
    </div>
    <div class="form-group">
        <label>Total Price</label>
        <InputNumber @bind-Value="@reservation.TotalPrice" class="form-control" readonly />
    </div>

    @if (success)
    {
        <div class="text-success success-message">Reservation updated successfully!</div>
    }
    else if (message != string.Empty)
    {
        <div class="text-danger">@message</div>
    }

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter] public int id { get; set; }
    private Reservation reservation = new();
    private IEnumerable<Room> rooms = new List<Room>();
    private int oldRoomId;
    bool success;
    private string message = string.Empty;
    private string customerMessage = string.Empty;

    private List<Customer> customers = new();
    private bool isAddingNewCustomer = false;
    private Customer newCustomer = new();

    protected override async Task OnInitializedAsync()
    {
        if (id <= 0)
        {
            GoToList();
        }
        else
        {
            var existingReservation = await reservationService.GetReservationByIdAsync(id);
            if (existingReservation != null)
            {
                reservation = existingReservation;

                customers = await customerService.GetCustomersAsync();
                rooms = await roomService.GetAllRoomsAsync();
                oldRoomId = reservation.RoomId;
                StateHasChanged();
            }
            else
            {
                GoToList();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("initSelect2", ".selectsearch");
        }
    }

    private async Task OnRoomChange(int value)
    {
        reservation.RoomId = value;
        var room = rooms.FirstOrDefault(r => r.RoomId == reservation.RoomId);
        if (room != null)
        {
            reservation.TotalPrice = CalculatePrice(room.PricePerNight);
        }
    }

    private void CheckInDateChange(DateTime value)
    {
        reservation.CheckInDate = value;
        CalculateTotalPrice();
    }
    private void CheckOutDateChange(DateTime value)
    {
        reservation.CheckOutDate = value;
        CalculateTotalPrice();
    }

    private void CalculateTotalPrice()
    {
        var room = rooms.FirstOrDefault(r => r.RoomId == reservation.RoomId);
        if (room != null && reservation.CheckInDate != default && reservation.CheckOutDate != default)
        {
            var days = (reservation.CheckOutDate - reservation.CheckInDate).Days + 1;
            reservation.TotalPrice = days > 0 ? room.PricePerNight * days : 0;
        }
    }

    private decimal CalculatePrice(decimal pricePerNight)
    {
        var nights = (reservation.CheckOutDate - reservation.CheckInDate).Days + 1;
        return nights > 0 ? nights * pricePerNight : 0;
    }

    private async Task HandleValidSubmit()
    {
        success = false; // Reset success before each submission
        message = string.Empty;


        if (reservation.CustomerId <= 0)
        {
            message = "Select a Customer or add new";
            return;
        }

        var room = rooms.FirstOrDefault(r => r.RoomId == reservation.RoomId && r.RoomId != oldRoomId);

        if (room != null && !room.IsAvailable)
        {
            message = "Room Accupied";
            return;
        }

        if (await reservationService.UpdateReservationAsync(reservation))
        {
            success = true;
            StateHasChanged();

            if (oldRoomId != reservation.RoomId)
            {
                await roomService.UpdateStatus(oldRoomId, true);
                await roomService.UpdateStatus(reservation.RoomId, false);
            }

            await Task.Delay(1500); // Wait for 2 seconds
            GoToList();
        }
        StateHasChanged();
    }

    private void GoToList()
    {
        navigation.NavigateTo("/reservations");
    }

    private async Task OnCustomerChange(int selectedCustomerId)
    {
        reservation.CustomerId = selectedCustomerId;
        if (selectedCustomerId == -1) // New Customer Option Selected
        {
            isAddingNewCustomer = true;
            newCustomer = new Customer();
        }
        else
        {
            isAddingNewCustomer = false;
        }
    }

    private async Task SaveNewCustomer()
    {
        customerMessage = string.Empty;
        if (await customerService.CheckPhoneNumber(newCustomer.PhoneNumber))
        {
            customerMessage = "Phone number already exists";
            return;
        }
        var savedCustomer = await customerService.AddCustomerAsync(newCustomer);
        if (savedCustomer != null)
        {
            customers.Add(savedCustomer);
            reservation.CustomerId = savedCustomer.CustomerId;
            isAddingNewCustomer = false;
        }
    }
}
