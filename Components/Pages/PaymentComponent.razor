@page "/payments"
@rendermode InteractiveServer
@using HMS.Services
@using HMS.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using OfficeOpenXml
@inject IPaymentService paymentService
@inject NavigationManager navigation
@inject IJSRuntime jsRuntime
@inject ILogger<PaymentComponent> logger
@attribute [Authorize]

<h4 Class="text-center">Payments</h4>
<hr />

<div Class="row mb-3">
    <div class="col">
        <button class="btn btn-sm btn-outline-info" @onclick="AddItem">Add</button>
        <button class="btn btn-sm btn-outline-success" @onclick="ExportToExcel">Export</button>
    </div>
</div>
<QuickGrid Items="payments.AsQueryable()" Pagination="pagination" Class="table table-bordered">
    <PropertyColumn Property="@(p => p.PaymentId)" Title="ID" />
    <PropertyColumn Property="@(p => p.ReservationId)" Title="Reservation ID" />
    <PropertyColumn Property="@(p => p.AmountPaid)" Title="Amount Paid" />
    <PropertyColumn Property="@(p => p.PaymentDate)" Title="Payment Date" />
    <PropertyColumn Property="@(p => p.PaymentStatus)" Title="Status" />
</QuickGrid>
<Paginator State="pagination" />
@code {
    private List<Payment> payments = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        payments = await paymentService.GetPaymentsAsync();
    }

    private void AddItem()
    {
        navigation.NavigateTo("add-payment");
    }

    private Task EditItem(int id)
    {
        navigation.NavigateTo($"payments/edit/{id}");
        return Task.CompletedTask;
    }

    private async Task ExportToExcel()
    {
        try
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set license context
            using var package = new OfficeOpenXml.ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Payments");

            // Add headers
            worksheet.Cells[1, 1].Value = "SL";
            worksheet.Cells[1, 2].Value = "Payment ID";
            worksheet.Cells[1, 3].Value = "Reservation ID";
            worksheet.Cells[1, 4].Value = "Paid Amount";
            worksheet.Cells[1, 5].Value = "Payment Date";
            worksheet.Cells[1, 6].Value = "Status";

            // Populate data
            for (int i = 0; i < payments.Count; i++)
            {
                var row = i + 2;
                worksheet.Cells[row, 1].Value = (i + 1);
                worksheet.Cells[row, 2].Value = payments[i].PaymentId;
                worksheet.Cells[row, 3].Value = payments[i].ReservationId;
                worksheet.Cells[row, 4].Value = payments[i].AmountPaid;
                worksheet.Cells[row, 5].Value = payments[i].PaymentDate;
                worksheet.Cells[row, 6].Value = payments[i].PaymentStatus;
            }

            // Convert to bytes and trigger download
            var excelBytes = package.GetAsByteArray();
            var fileName = "Payments.xlsx";
            await using var stream = new MemoryStream(excelBytes);

            using var streamRef = new Microsoft.JSInterop.DotNetStreamReference(stream);

            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            logger.LogError($"Error exporting payments to Excel: {ex.Message}");
        }

    }

    private async Task DeleteItem(int paymentId)
    {
        try
        {
            // Show a confirmation dialog before deleting.
            var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete this payment: {paymentId}?" });

            if (confirmed)
            {
                await paymentService.DeletePaymentAsync(paymentId);
                payments = await paymentService.GetPaymentsAsync();
                StateHasChanged(); // Refresh the UI.
                logger.LogError($"Deleted payment: {paymentId}");
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"Error deleting hotel: {ex.Message}");
        }
    }
}
