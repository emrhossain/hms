@page "/hotel"
@rendermode InteractiveServer
@attribute [StreamRendering]
@using HMS.Data
@using HMS.Services
@inject IHotelService hotelService
@inject NavigationManager navigation

<MudText Typo="Typo.h3" Class="text-center">Hotel</MudText>

<MudGrid Class="mb-3">
    <MudItem>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" Variant="Variant.Filled" Size="Size.Small" @onclick="AddItem">Add</MudButton>
        <MudButton StartIcon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" Variant="Variant.Outlined" Size="Size.Small" @onclick="ExportToExcel">Export</MudButton>
    </MudItem>
</MudGrid>

<MudGrid Class="mb-3">
    <MudItem lg="4">
        <MudTextField T="string" Variant="Variant.Text" Placeholder="Name" @bind-Value="searchName" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField T="string" Variant="Variant.Text" Placeholder="Description" @bind-Value="searchDescription" />
    </MudItem>
    <MudItem lg="4">
        <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Outlined.Search" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" @onclick="SearchWithTerm">Search</MudButton>
    </MudItem>
</MudGrid>

@if (hotels == null)
{
    <MudText>Loading...</MudText>
}
else if (!hotels.Any())
{
    <MudText>No data available</MudText>
}
else
{
    <MudTable Items="hotels" Hover="true" SortLabel="Sort By" Dense="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Hotel, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Hotel, object>(x => x.Location)">Location</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Hotel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Hotel, object>(x => x.PhoneNumber)">PhoneNumber</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Hotel, object>(x => x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Location">@context.Location</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private string searchName = string.Empty;
    private string searchDescription = string.Empty;
    private IEnumerable<Hotel>? hotels;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadHotelsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading hotels: {ex.Message}");
        }
    }

    private async Task LoadHotelsAsync()
    {
        try
        {
            hotels = await hotelService.GetHotelsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching hotel data: {ex.Message}");
        }
    }

    private async Task SearchWithTerm()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchName) && string.IsNullOrWhiteSpace(searchDescription))
            {
                await LoadHotelsAsync();
            }
            else
            {
                hotels = await hotelService.SearchHotelsWithTerm(searchName, searchDescription);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during search: {ex.Message}");
        }
    }

    private void AddItem()
    {
        navigation.NavigateTo("add-hotel");
    }

    private void ExportToExcel()
    {
        // Implement your export logic here
    }
}
