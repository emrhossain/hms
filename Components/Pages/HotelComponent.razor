@page "/hotel"
@rendermode InteractiveServer
@using HMS.Data
@using HMS.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using OfficeOpenXml
@inject IHotelService hotelService
@inject NavigationManager navigation
@inject IJSRuntime jsRuntime
@inject ILogger<HotelComponent> logger

<h4 Class="text-center">Hotel</h4>
<hr />

<div Class="row mb-3">
    <div class="col">
        <button class="btn btn-sm btn-outline-info" @onclick="AddItem">Add</button>
        <button class="btn btn-sm btn-outline-success" @onclick="ExportToExcel">Export</button>
    </div>
</div>

<div Class="row mb-3">
    <div class="col-auto">
        <InputText class="form-control" Placeholder="Name" @bind-Value="searchName" />
    </div>
    <div class="col-auto">
        <InputText class="form-control" Placeholder="Description" @bind-Value="searchDescription" />
    </div>
    <div class="col-auto">
        <button class="btn btn-outline-primary mb-3" @onclick="SearchWithTerm">Search</button>
    </div>
</div>


@if (hotels == null)
{
    <div>Loading...</div>
}
else if (!hotels.Any())
{
    <div>No data available</div>
}
else
{
    <QuickGrid Items="hotels" Pagination="pagination" Class="table table-responsive table-bordered table-striped">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Location)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
        <PropertyColumn Property="@(p => p.PhoneNumber)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Email)" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button class="btn btn-sm btn-link" @onclick="@(() => EditItem(context.HotelId))"><i class="bi bi-pencil"></i></button>
            <button class="btn btn-sm btn-link" @onclick="@(() => DeleteItem(context))"><i class="bi bi-trash"></i></button>
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="pagination" />

}

@code {
    private string searchName = string.Empty;
    private string searchDescription = string.Empty;
    private IQueryable<Hotel>? hotels;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadHotelsAsync();
        }
        catch (Exception ex)
        {
            logger.LogError($"Error loading hotels: {ex.Message}");
        }
    }

    private async Task LoadHotelsAsync()
    {
        try
        {
            var a = await hotelService.GetHotelsAsync();
            hotels = a.AsQueryable();
        }
        catch (Exception ex)
        {
            logger.LogError($"Error fetching hotel data: {ex.Message}");
        }
    }

    private async Task SearchWithTerm()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchName) && string.IsNullOrWhiteSpace(searchDescription))
            {
                await LoadHotelsAsync();
            }
            else
            {
                var a = await hotelService.SearchHotelsWithTerm(searchName, searchDescription);
                hotels = a.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"Error during search: {ex.Message}");
        }
    }

    private void AddItem()
    {
        navigation.NavigateTo("add-hotel");
    }

    private async Task ExportToExcel()
    {
        try
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set license context
            using var package = new OfficeOpenXml.ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Hotels");

            // Add headers
            worksheet.Cells[1, 1].Value = "SL";
            worksheet.Cells[1, 2].Value = "Name";
            worksheet.Cells[1, 3].Value = "Location";
            worksheet.Cells[1, 4].Value = "Description";
            worksheet.Cells[1, 5].Value = "Phone Number";
            worksheet.Cells[1, 6].Value = "Email";

            // Populate data
            var hotelList = hotels.ToList();
            for (int i = 0; i < hotelList.Count; i++)
            {
                var row = i + 2;
                worksheet.Cells[row, 1].Value = (i + 1);
                worksheet.Cells[row, 2].Value = hotelList[i].Name;
                worksheet.Cells[row, 3].Value = hotelList[i].Location;
                worksheet.Cells[row, 4].Value = hotelList[i].Description;
                worksheet.Cells[row, 5].Value = hotelList[i].PhoneNumber;
                worksheet.Cells[row, 6].Value = hotelList[i].Email;
            }

            // Convert to bytes and trigger download
            var excelBytes = package.GetAsByteArray();
            var fileName = "Hotels.xlsx";
            await using var stream = new MemoryStream(excelBytes);

            using var streamRef = new Microsoft.JSInterop.DotNetStreamReference(stream);

            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            logger.LogError($"Error exporting hotels to Excel: {ex.Message}");
        }
        
    }

    private Task EditItem(int id)
    {
        navigation.NavigateTo($"hotel/edit/{id}");
        return Task.CompletedTask;
    }

    private async Task DeleteItem(Hotel hotel)
    {

        try
        {
            // Show a confirmation dialog before deleting.
            var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete this hotel: '{hotel.Name}'?" });

            if (confirmed)
            {
                await hotelService.DeleteHotelAsync(hotel.HotelId);
                await LoadHotelsAsync();
                StateHasChanged(); // Refresh the UI.
                logger.LogError($"Deleted hotel: {hotel.Name}");
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"Error deleting hotel: {ex.Message}");
        }
    }

}
