@page "/customers"
@rendermode InteractiveServer
@using HMS.Services
@using HMS.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using OfficeOpenXml
@inject ICustomerService customerService
@inject NavigationManager navigation
@inject IJSRuntime jsRuntime
@inject ILogger<CustomerComponent> logger

<h4 class="text-center">Customers</h4>
<hr />


<div class="row mb-3">
    <div class="col">
        <button class="btn btn-sm btn-outline-info" @onclick="AddCustomer">Add</button>
        <button class="btn btn-sm btn-outline-success" @onclick="ExportToExcel">Export</button>
    </div>
</div>

<div class="row mb-3">
    <div class="col-auto">
        <InputText class="form-control" placeholder="Customer Name" @bind-Value="searchCustomerName" />
    </div>
    <div class="col-auto">
        <InputText class="form-control" placeholder="Customer Phone" @bind-Value="searchCustomerPhone" />
    </div>
    <div class="col-auto">
        <button class="btn btn-outline-primary mb-3" @onclick="SearchWithTerm">Search</button>
    </div>
</div>

@if (Customers == null)
{
    <div>Loading...</div>
}
else if (!Customers.Any())
{
    <div>No data available</div>
}
else
{
    <QuickGrid Items="Customers" Pagination="pagination" Class="table table-responsive table-bordered table-striped">
        <PropertyColumn Property="@(r => r.Name)" Title="Name" Sortable="true" />
        <PropertyColumn Property="@(r => r.PhoneNumber)" Title="Phone Number" Sortable="true" />
        <PropertyColumn Property="@(r => r.Email)" Title="Email" Sortable="true" />
        <PropertyColumn Property="@(r => r.Address)" Title="Address" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button class="btn btn-sm btn-link" @onclick="@(() => EditCustomer(context.CustomerId))"><i class="bi bi-pencil"></i></button>
            <button class="btn btn-sm btn-link" @onclick="@(() => DeleteCustomer(context))"><i class="bi bi-trash"></i></button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="pagination" />
}

@code {
    private string searchCustomerName = string.Empty;
    private string searchCustomerPhone = string.Empty;
    private IQueryable<Customer>? Customers;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCustomersAsync();
        }
        catch (Exception ex)
        {
            logger.LogError($"Error loading Customers: {ex.Message}");
        }
    }

    private async Task LoadCustomersAsync()
    {
        try
        {
            var CustomerList = await customerService.GetCustomersAsync();
            Customers = CustomerList.AsQueryable();
        }
        catch (Exception ex)
        {
            logger.LogError($"Error fetching Customer data: {ex.Message}");
        }
    }

    private async Task SearchWithTerm()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchCustomerName) && (string.IsNullOrEmpty(searchCustomerPhone)))
            {
                await LoadCustomersAsync();
            }
            else
            {
                var filteredCustomers = await customerService.SearchCustomersAsync(searchCustomerName, searchCustomerPhone);
                Customers = filteredCustomers.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"Error during search: {ex.Message}");
        }
    }

    private void AddCustomer()
    {
        navigation.NavigateTo("add-Customer");
    }

    private async Task ExportToExcel()
    {
        try
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set license context
            using var package = new OfficeOpenXml.ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Customers");

            // Add headers
            worksheet.Cells[1, 1].Value = "SL";
            worksheet.Cells[1, 2].Value = "Customer ID";
            worksheet.Cells[1, 3].Value = "Customer Name";
            worksheet.Cells[1, 4].Value = "Phone";
            worksheet.Cells[1, 5].Value = "Email";
            worksheet.Cells[1, 6].Value = "Address";

            // Populate data
            var CustomerList = Customers.ToList();
            for (int i = 0; i < CustomerList.Count; i++)
            {
                var row = i + 2;
                worksheet.Cells[row, 1].Value = (i + 1);
                worksheet.Cells[row, 2].Value = CustomerList[i].CustomerId;
                worksheet.Cells[row, 3].Value = CustomerList[i].Name;
                worksheet.Cells[row, 4].Value = CustomerList[i].PhoneNumber;
                worksheet.Cells[row, 5].Value = CustomerList[i].Email;
                worksheet.Cells[row, 6].Value = CustomerList[i].Address;
            }

            // Convert to bytes and trigger download
            var excelBytes = package.GetAsByteArray();
            var fileName = "Customers.xlsx";
            await using var stream = new MemoryStream(excelBytes);

            using var streamRef = new Microsoft.JSInterop.DotNetStreamReference(stream);

            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            logger.LogError($"Error exporting to Excel: {ex.Message}");
        }

    }

    private Task EditCustomer(int id)
    {
        navigation.NavigateTo($"customer/edit/{id}");
        return Task.CompletedTask;
    }

    private async Task DeleteCustomer(Customer Customer)
    {
        try
        {
            var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete this Customer: '{Customer.Name}'?" });

            if (confirmed)
            {
                await customerService.DeleteCustomerAsync(Customer.CustomerId);
                await LoadCustomersAsync();
                StateHasChanged(); // Refresh the UI.
                logger.LogError($"Deleted Customer: {Customer.Name}");
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"Error deleting Customer: {ex.Message}");
        }
    }
}
