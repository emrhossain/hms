@page "/customer/edit/{id:int}"
@rendermode InteractiveServer
@using HMS.Data
@using HMS.Services
@using Microsoft.AspNetCore.Authorization
@inject ICustomerService customerService
@inject NavigationManager navigation
@attribute [Authorize]

<h4 Class="text-center">Edit Customer</h4>
<hr />


<button Class="ml-auto mt-3 btn btn-sm btn-link" @onclick="GoToList">Customer List</button>


<EditForm FormName="CustomerEditForm" Model="model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col">
            <InputText Placeholder="Customer Name" Class="form-control mt-3" @bind-Value="@model.Name" For="@(() => model.Name)" />
            <ValidationMessage For="@(() => model.Name)" />

            <label for="phoneNumber" class="mt-3">Phone Number</label>
            <InputText @bind-Value="@model.PhoneNumber" id="phoneNumber" Class="form-control mt-3" />
            <ValidationMessage For="@(() => model.PhoneNumber)" />

            <label for="email" class="mt-3">Email</label>
            <InputText @bind-Value="@model.Email" id="email" Class="form-control mt-3" />
            <ValidationMessage For="@(() => model.Email)" />

            <label for="address" class="mt-3">Address</label>
            <InputTextArea @bind-Value="@model.Address" id="address" Class="form-control mt-3" />
            <ValidationMessage For="@(() => model.Address)" />

            @if (success)
            {
                <div class="text-success success-message">Customer updated successfully!</div>
            }

            <button type="submit" Class="ml-auto mt-3 btn btn-sm btn-outline-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    Customer model = new Customer();
    [Parameter] public int id { get; set; }
    bool success;

    protected override async Task OnInitializedAsync()
    {
        if (id <= 0)
        {
            GoToList();
        }
        else
        {
            var existingCustomer = await customerService.GetCustomerByIdAsync(id);
            if (existingCustomer != null)
            {
                model = existingCustomer;
                StateHasChanged();
            }
            else
            {
                GoToList();
            }
        }
    }

    private async void OnValidSubmit()
    {
        success = false; // Reset success before each submission
        var updated = await customerService.UpdateCustomerAsync(model);
        if (updated)
        {
            success = true;
            StateHasChanged();
            await Task.Delay(1500); // Wait for 2 seconds
            GoToList(); // return to list after 2 seconds
        }

        StateHasChanged();
    }

    private void GoToList()
    {
        navigation.NavigateTo("customers");
    }

}
