@page "/hotel/edit/{HotelId}"
@rendermode InteractiveServer
@using HMS.Data
@using HMS.Services
@inject IHotelService hotelService
@inject NavigationManager navigation

<h3 Class="text-center">Edit Hotel</h3>

<button Class="ml-auto mt-3 btn btn-sm btn-link" @onclick="GoToList">Hotel List</button>

<EditForm FormName="EditHotel" Model="model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col">
            <InputText Placeholder="Name" Class="form-control mt-3" @bind-Value="@model.Name" For="@(() => model.Name)" />
            <InputText Placeholder="Location" Class="form-control mt-3" @bind-Value="@model.Location" For="@(() => model.Location)" />
            <InputTextArea Placeholder="Description" Class="form-control mt-3" @bind-Value="@model.Description" For="@(() => model.Description)" />
            <InputText Placeholder="Phone Number" Class="form-control mt-3" @bind-Value="@model.PhoneNumber" For="@(() => model.PhoneNumber)" />
            <InputText Placeholder="Email" Label="Email" Class="form-control mt-3" @bind-Value="@model.Email" For="@(() => model.Email)" />

            @if (success)
            {
                <div class="text-success success-message">Hotel updated successfully!</div>
            }

            <div class="text-danger">
                <ValidationSummary />
            </div>
            <button type="submit" Class="ml-auto mt-3 btn btn-sm btn-outline-primary">Save</button>
        </div>
    </div>
</EditForm>
@code {
    Hotel model = new Hotel();
    [Parameter] public string? HotelId { get; set; }

    bool success;

    protected override async void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(HotelId) || !int.TryParse(HotelId, out int id))
        {
            GoToList();
        }
        else
        {
            var existingHotel = await hotelService.GetHotelByIdAsync(id);
            if (existingHotel != null)
            {
                model = existingHotel;
                StateHasChanged();
            }
            else
            {
                GoToList();
            }
        }
    }
    private async void OnValidSubmit()
    {
        success = false; // Reset success before each submission
        var updated = await hotelService.UpdateHotelAsync(model);
        if (updated)
        {
            success = true;
            StateHasChanged();
            await Task.Delay(2000); // Wait for 2 seconds
            GoToList(); // return to list after 2 seconds
        }

        StateHasChanged();
    }

    private void GoToList()
    {
        navigation.NavigateTo("hotel");
    }

}
